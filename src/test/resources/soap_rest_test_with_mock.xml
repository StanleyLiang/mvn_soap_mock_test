<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project id="976e9a3b-1c3a-41c9-8241-136447e335ca" activeEnvironment="Default" name="soap with mock service" resourceRoot="" soapui-version="5.2.1" abortOnError="false" runType="SEQUENTIAL" xmlns:con="http://eviware.com/soapui/config"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.actions.iface.tools.soapui.TestRunnerAction@values-local"><![CDATA[<xml-fragment xmlns:con="http://eviware.com/soapui/config">
  <con:entry key="Environment" value="Default"/>
  <con:entry key="Global Properties" value=""/>
  <con:entry key="TestSuite" value="&lt;all>"/>
  <con:entry key="Password" value=""/>
  <con:entry key="TestRunner Path" value=""/>
  <con:entry key="Tool Args" value=""/>
  <con:entry key="Ignore Errors" value="false"/>
  <con:entry key="Host:Port" value=""/>
  <con:entry key="user-settings.xml Password" value=""/>
  <con:entry key="WSS Password Type" value=""/>
  <con:entry key="Save Project" value="false"/>
  <con:entry key="Enable UI" value="false"/>
  <con:entry key="System Properties" value=""/>
  <con:entry key="Domain" value=""/>
  <con:entry key="Coverage Report" value="false"/>
  <con:entry key="Export JUnit Results" value="false"/>
  <con:entry key="Export JUnit Results with test properties" value="false"/>
  <con:entry key="Open Report" value="false"/>
  <con:entry key="Project Properties" value=""/>
  <con:entry key="Export All" value="false"/>
  <con:entry key="Project Password" value=""/>
  <con:entry key="Report Format(s)" value=""/>
  <con:entry key="TestCase" value="&lt;all>"/>
  <con:entry key="Print Report" value="false"/>
  <con:entry key="Username" value=""/>
  <con:entry key="Root Folder" value=""/>
  <con:entry key="Select Report Type" value=""/>
  <con:entry key="Save After" value="false"/>
  <con:entry key="Add Settings" value="false"/>
  <con:entry key="Endpoint" value=""/>
</xml-fragment>]]></con:setting></con:settings><con:interface xsi:type="con:RestService" id="e8fce925-eff2-4314-9fcb-54b3157bba7c" wadlVersion="http://wadl.dev.java.net/2009/02" name="http://localhost:8089" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>http://localhost:8089</con:endpoint></con:endpoints><con:resource name="/api/epns-test/callback" path="/api/epns-test/callback" id="ef7c9cb3-c668-4631-82d0-6a2e718e14f9"><con:settings/><con:parameters/><con:method name="PostToMock" id="b048ce4a-a95b-4d24-953e-ab33463ca09f" method="POST"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>text/html; charset=iso-8859-1</con:mediaType><con:status>200</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:cal="http://localhost/api/epns-test/callback">cal:Response</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Request 1" id="76397001-b3cd-45f6-9162-40828e84a5df" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://localhost:8089</con:endpoint><con:request>{
	"message":"${#Project#EXPECTMESSAGE}"
}</con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:testSuite id="52756d77-1ec4-46a7-9270-480c1fccc182" name="TestFCM"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="eaa71924-f148-417c-980f-a53b58629016" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TestCase_VerifyMessage" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Verify message" id="16543058-0514-40b4-903b-924ad094d5d5"><con:settings/><con:config><script>//get property passed from Mock service
def message = context.getProperty("message")
log.info "message: $message"

assert message == testRunner.testCase.testSuite.project.getPropertyValue( "EXPECTMESSAGE" )


</script></con:config></con:testStep><con:setupScript/><con:properties/></con:testCase><con:testCase id="30cb27ed-32ce-48b0-a06f-897e9ce358b3" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TestCase_mockTest" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="postToMock" id="1e2b77a0-c654-4d29-bf81-887e20239e8b"><con:settings/><con:config service="http://localhost:8089" resourcePath="/api/epns-test/callback" methodName="PostToMock" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="postToMock" id="76397001-b3cd-45f6-9162-40828e84a5df" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://localhost:8089</con:endpoint><con:request>{
	"message":"${#Project#EXPECTMESSAGE}"
}</con:request><con:originalUri>http://localhost/api/epns-test/callback</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:properties/></con:testSuite><con:restMockService id="ecb35e7c-4d91-403a-90b9-a0d79ab9d475" port="8089" path="/" host="localhost" name="Callback MockService" docroot=""><con:settings/><con:properties/><con:restMockAction name="/api/epns-test/callback" method="POST" resourcePath="/api/epns-test/callback" id="db3e31a1-171d-400e-b76a-feba14b41450"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="7e68d5cb-1ca0-4330-830e-9c4074a57b0c" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:script>import groovy.json.JsonSlurper
//read message from payload
def jsonData = new JsonSlurper().parseText(mockRequest.getRequestContent())
log.info("MockService - get message: " + jsonData.message)
//log.info("MockService - get callbackURL: " + jsonData.callbackURL)
def testSuite = context.mockService.project.getTestSuiteByName("TestFCM")
def callBackTestCase = testSuite.getTestCaseByName("TestCase_VerifyMessage")
//trigger testcase2 to verify the result
def map = new com.eviware.soapui.support.types.StringToObjectMap() 
//map.put("message", mockRequest.getRequestContent())
map.put("message", jsonData.message)
callBackTestCase.run(map, true)

context.testaction="/api/epns-test/callback"
mockResponse.setResponseHttpStatus(200)</con:script><con:responseContent>{"status":"ok"}</con:responseContent></con:response></con:restMockAction></con:restMockService><con:properties><con:property><con:name>EXPECTMESSAGE</con:name><con:value>hi</con:value></con:property><con:property><con:name>MOCKHOST</con:name><con:value>localhost</con:value></con:property></con:properties><con:afterLoadScript/><con:wssContainer/><con:oAuth2ProfileContainer/><con:sensitiveInformation/></con:soapui-project>